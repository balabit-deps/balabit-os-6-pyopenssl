Backport of:

From 4aa52c33d3ee51c632e0e1e10cafb7745fd1028c Mon Sep 17 00:00:00 2001
From: Alex Gaynor <alex.gaynor@gmail.com>
Date: Mon, 20 Nov 2017 09:04:08 -0500
Subject: [PATCH] Don't use things after they're freed...duh (#709)

* Don't use things after they're freed...duh

* changelog

* more details
---
 CHANGELOG.rst         |  3 ++-
 src/OpenSSL/SSL.py    |  7 ++-----
 src/OpenSSL/crypto.py | 45 ++++++++++++++++++++++++++++++++++---------
 3 files changed, 40 insertions(+), 15 deletions(-)

Index: pyopenssl-0.15.1/OpenSSL/SSL.py
===================================================================
--- pyopenssl-0.15.1.orig/OpenSSL/SSL.py	2018-10-18 08:00:35.975691323 -0400
+++ pyopenssl-0.15.1/OpenSSL/SSL.py	2018-10-18 08:00:35.971691315 -0400
@@ -1684,9 +1684,7 @@ class Connection(object):
         """
         cert = _lib.SSL_get_peer_certificate(self._ssl)
         if cert != _ffi.NULL:
-            pycert = X509.__new__(X509)
-            pycert._x509 = _ffi.gc(cert, _lib.X509_free)
-            return pycert
+            return X509._from_raw_x509_ptr(cert)
         return None
 
 
@@ -1705,8 +1703,7 @@ class Connection(object):
         for i in range(_lib.sk_X509_num(cert_stack)):
             # TODO could incref instead of dup here
             cert = _lib.X509_dup(_lib.sk_X509_value(cert_stack, i))
-            pycert = X509.__new__(X509)
-            pycert._x509 = _ffi.gc(cert, _lib.X509_free)
+            pycert = X509._from_raw_x509_ptr(cert)
             result.append(pycert)
         return result
 
Index: pyopenssl-0.15.1/OpenSSL/crypto.py
===================================================================
--- pyopenssl-0.15.1.orig/OpenSSL/crypto.py	2018-10-18 08:00:35.975691323 -0400
+++ pyopenssl-0.15.1/OpenSSL/crypto.py	2018-10-18 08:01:27.987782184 -0400
@@ -158,6 +158,19 @@ def _get_asn1_time(timestamp):
 
 
 
+class _X509NameInvalidator(object):
+    def __init__(self):
+        self._names = []
+
+    def add(self, name):
+        self._names.append(name)
+
+    def clear(self):
+        for name in self._names:
+            # Breaks the object, but also prevents UAF!
+            del name._name
+
+
 class PKey(object):
     _only_public = False
     _initialized = True
@@ -924,6 +937,18 @@ class X509(object):
         x509 = _lib.X509_new()
         self._x509 = _ffi.gc(x509, _lib.X509_free)
 
+        self._issuer_invalidator = _X509NameInvalidator()
+        self._subject_invalidator = _X509NameInvalidator()
+
+
+    @classmethod
+    def _from_raw_x509_ptr(cls, x509):
+        cert = cls.__new__(cls)
+        cert._x509 = _ffi.gc(x509, _lib.X509_free)
+        cert._issuer_invalidator = _X509NameInvalidator()
+        cert._subject_invalidator = _X509NameInvalidator()
+        return cert
+
 
     def set_version(self, version):
         """
@@ -1265,7 +1290,9 @@ class X509(object):
 
         :return: An X509Name object
         """
-        return self._get_name(_lib.X509_get_issuer_name)
+        name = self._get_name(_lib.X509_get_issuer_name)
+        self._issuer_invalidator.add(name)
+        return name
 
 
     def set_issuer(self, issuer):
@@ -1277,7 +1304,8 @@ class X509(object):
 
         :return: None
         """
-        return self._set_name(_lib.X509_set_issuer_name, issuer)
+        self._set_name(_lib.X509_set_issuer_name, issuer)
+        self._issuer_invalidator.clear()
 
 
     def get_subject(self):
@@ -1286,7 +1314,9 @@ class X509(object):
 
         :return: An X509Name object
         """
-        return self._get_name(_lib.X509_get_subject_name)
+        name = self._get_name(_lib.X509_get_subject_name)
+        self._subject_invalidator.add(name)
+        return name
 
 
     def set_subject(self, subject):
@@ -1297,7 +1327,8 @@ class X509(object):
         :type subject: :py:class:`X509Name`
         :return: None
         """
-        return self._set_name(_lib.X509_set_subject_name, subject)
+        self._set_name(_lib.X509_set_subject_name, subject)
+        self._subject_invalidator.clear()
 
 
     def get_extension_count(self):
@@ -1451,8 +1482,7 @@ class X509StoreContext(object):
         # expect this call to never return :class:`None`.
         _x509 = _lib.X509_STORE_CTX_get_current_cert(self._store_ctx)
         _cert = _lib.X509_dup(_x509)
-        pycert = X509.__new__(X509)
-        pycert._x509 = _ffi.gc(_cert, _lib.X509_free)
+        pycert = X509._from_raw_x509_ptr(_cert)
         return X509StoreContextError(errors, pycert)
 
 
@@ -1510,9 +1540,7 @@ def load_certificate(type, buffer):
     if x509 == _ffi.NULL:
         _raise_current_error()
 
-    cert = X509.__new__(X509)
-    cert._x509 = _ffi.gc(x509, _lib.X509_free)
-    return cert
+    return X509._from_raw_x509_ptr(x509)
 
 
 def dump_certificate(type, cert):
