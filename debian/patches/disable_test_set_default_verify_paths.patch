Description: disable test_set_default_verify_paths since it tries to access the web

--- a/OpenSSL/test/test_ssl.py
+++ b/OpenSSL/test/test_ssl.py
@@ -1084,21 +1084,22 @@ class ContextTests(TestCase, _LoopbackMi
             # internet which has such a certificate.  Connecting to the network
             # in a unit test is bad, but it's the only way I can think of to
             # really test this. -exarkun
+            pass
 
             # Arg, verisign.com doesn't speak anything newer than TLS 1.0
-            context = Context(TLSv1_METHOD)
-            context.set_default_verify_paths()
-            context.set_verify(
-                VERIFY_PEER,
-                lambda conn, cert, errno, depth, preverify_ok: preverify_ok)
+            #context = Context(TLSv1_METHOD)
+            #context.set_default_verify_paths()
+            #context.set_verify(
+            #    VERIFY_PEER,
+            #    lambda conn, cert, errno, depth, preverify_ok: preverify_ok)
 
-            client = socket()
-            client.connect(('verisign.com', 443))
-            clientSSL = Connection(context, client)
-            clientSSL.set_connect_state()
-            clientSSL.do_handshake()
-            clientSSL.send(b"GET / HTTP/1.0\r\n\r\n")
-            self.assertTrue(clientSSL.recv(1024))
+            #client = socket()
+            #client.connect(('verisign.com', 443))
+            #clientSSL = Connection(context, client)
+            #clientSSL.set_connect_state()
+            #clientSSL.do_handshake()
+            #clientSSL.send(b"GET / HTTP/1.0\r\n\r\n")
+            #self.assertTrue(clientSSL.recv(1024))
 
 
     def test_set_default_verify_paths_signature(self):
